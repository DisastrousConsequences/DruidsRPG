class InvulnerabilityInv extends Inventory;

var RPGRules Rules;
var float ExpPerDamage;
var int EstimatedRunTime;
var vector CoreLocation;
var Controller InvPlayerController;
var float EffectRadius;
var Material EffectOverlay;
var int PlayerHealth;
var Pawn PlayerPawn;

replication
{
	reliable if (bNetInitial && Role == ROLE_Authority)
		InvPlayerController,CoreLocation,EstimatedRunTime;
}

simulated function PostBeginPlay()
{
	Super.PostBeginPlay();

	SetTimer(1, true);
}

function GiveTo(Pawn Other, optional Pickup Pickup)
{
	super.GiveTo(Other, Pickup);
	SwitchOnInvulnerability();
}

function SwitchOnInvulnerability()
{
	// need to switch on invulnerability for this player
	if ((Owner == None) || (InvPlayerController == None) || (Pawn(Owner) == None) || (Pawn(Owner).Controller == None))
	{	// got problems. Do not switch on
		Destroy();
		return;
	}

	if (PlayerController(Pawn(Owner).Controller) != None)
	{
		PlayerController(Pawn(Owner).Controller).ReceiveLocalizedMessage(class'InvulnerableConditionMessage', 0, InvPlayerController.Pawn.PlayerReplicationInfo);
	}
	Pawn(Owner).SetOverlayMaterial(EffectOverlay, EstimatedRunTime, true);
    PlayerHealth = Pawn(Owner).Health;  // save as reference
    PlayerPawn = Pawn(Owner);
}

function SwitchOffInvulnerability()
{
	// need to switch off invulnerability if we are the only source for this player
	// no other sphere will have started while we were running
	// if he started the globe, tough luck
	if (Pawn(Owner) != None && Pawn(Owner).Controller != None)
	{
		if (PlayerController(Pawn(Owner).Controller) != None)
		{
			PlayerController(Pawn(Owner).Controller).ReceiveLocalizedMessage(class'InvulnerableConditionMessage', 1);
		}
		Pawn(Owner).SetOverlayMaterial(EffectOverlay, -1, true);
	}
}

simulated function Timer()
{
	Local Controller C;
	local ArtifactSphereInvulnerability InitiatingSphere;

	if (Role == ROLE_Authority)
	{

		if ((Owner == None) || (Pawn(Owner) == None))
		{	// got problems.
			if (Owner == None)
				Warn("*** Invulnerability Sphere effect still active and unable to terminate. Owner None");
			else 
				Warn("*** Invulnerability Sphere effect still active and unable to terminate. Pawn(Owner) None");
			Destroy();
			return;
		}
		if ((Pawn(Owner).Controller == None))
		{	// may have problems. Could be the owner got in a vehicle. If so, lets switch off
			C = Level.ControllerList;
			while (C != None)
			{
				// loop round checking all controllers for vehicle being driven by this pawn
				if ( C.Pawn != None && Vehicle(C.Pawn) != None && Vehicle(C.Pawn).Driver == Owner)
				{
					if (PlayerController(C) != None)
						PlayerController(C).ReceiveLocalizedMessage(class'InvulnerableConditionMessage', 1);
					C.Pawn.SetOverlayMaterial(EffectOverlay, -1, true);
					Pawn(Owner).SetOverlayMaterial(EffectOverlay, -1, true);
					Destroy();
					return;
				}
				else	// may be flying a redeemer
				if ( C.Pawn != None && RedeemerWarhead(C.Pawn) != None && RedeemerWarhead(C.Pawn).OldPawn == Owner)
				{
					if (PlayerController(C) != None)
						PlayerController(C).ReceiveLocalizedMessage(class'InvulnerableConditionMessage', 1);
					C.Pawn.SetOverlayMaterial(EffectOverlay, -1, true);
					Pawn(Owner).SetOverlayMaterial(EffectOverlay, -1, true);
					Destroy();
					return;
				}
				C = C.NextController;
			}
			
			Warn("*** Invulnerability Sphere effect still active and unable to terminate. controller None");
			Destroy();
			return;
		}

		// now this state can be set in two ways - for a fixed time by remote Invulnerability, and by the sphere
		if (EffectRadius > 0.5)
		{	// kicked off from a sphere
		
			if ((InvPlayerController == None) || (InvPlayerController.Pawn == None) || (InvPlayerController.Pawn.Health <= 0) )
			{	// initiating player doesn't exist anymore, so artifact must have stopped
				SwitchOffInvulnerability();
				Destroy();
				return;
			}

			// lets find the artifact
			InitiatingSphere = ArtifactSphereInvulnerability(InvPlayerController.Pawn.FindInventoryType(class'ArtifactSphereInvulnerability'));

			// ok, lets check if still in range and artifact still active
			if ((VSize(Pawn(Owner).Location - CoreLocation) > EffectRadius) || (InitiatingSphere == None) || (!InitiatingSphere.bActive))
			{	// now out of range
				SwitchOffInvulnerability();
				Destroy();
				return;
			}

			// ok, lets see if the initiator gets any xp
			// XP now given differently, based on damage to player
			//if ((ExpPerSecond > 0) && (Rules != None))
			//{
			//	Rules.ShareExperience(RPGStatsInv(InvPlayerController.Pawn.FindInventoryType(class'RPGStatsInv')), ExpPerSecond);
			//}
		}

		// ok as a safety, and for non-sphere use, lets decrement the EstimatedRunTime, and switch off when zero
		EstimatedRunTime--;
		if (EstimatedRunTime <= 0)
		{	// failsafe, lets terminate
			SwitchOffInvulnerability();
			Destroy();
			return;
		}
	}

	//dont call super. Bad things will happen.
}

simulated function Destroyed()
{	
	if ((Owner != None) && (Pawn(Owner) != None) && (Pawn(Owner).Controller != None))
		 SwitchOffInvulnerability();
	super.Destroyed();
}

defaultproperties
{
     EffectOverlay=Shader'UTRPGTextures.Overlays.InvulnerabilityOverlay'
     bOnlyRelevantToOwner=False
     EstimatedRunTime=5
     
}
